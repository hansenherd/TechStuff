#!/bin/bash
# Batch File : sftpToFrom.sh
# Purpose    : To send files to GRS.
# Author     : Eric Kamradt   Jan-2009
#
# Copyright Access Development. All rights reserved.
# ##############################################################################

########################################
#
# connects to specified sftp site and performs an ls
# on the remote machine in order to get a file listing for the filespec
function debugLog
{
  if [ "$DEBUG" = 1 ]; then
    echo "$1"
  fi
}

function infoLog
{
  if [ "$INFO" = 1 ]; then
    echo "$1"
  fi
}


#########################################
#
# connects to specified sftp site and performs an ls
# on the remote machine in order to get a file listing for the filespec
# specified.
#
# sample usage:
#   $ getFileListAtFtpSite acct@sftpServer dir_on_site fileSpec
#
#   dir_on_site is the directory to change to once connected to the sftp site
#   
function getFileListAtFtpSite
{
echo "HERE" $1
echo "HERE" $2
echo "HERE" $3
    remotePath="${2}"

    if [ -z ${remotePath} ]; then
       remotePath="."
    fi

    sftp "${1}" <<EOF
    cd ${remotePath}
    ls ${3}
    quit
EOF
}

# ##############################################################################
#
#  For GET operations, this method determines if there are files that are 
#  available for sftp to move.
#
#    sets the $filesToSftp to TRUE if files are found to sftp
#
function numFilesOnSftpSite
{
  numFilesToMove=0
  if [ "$GET_OR_PUT" = "PUT" ]; then
    echo "numFilesOnSftpSite() function called for a PUT operation...invalid usage."
    return 0
  fi

  # local file containing the output from an ls done on the remote server...checking for files
  export SFTP_FILE_LIST="/tmp/FILES_TO_SFTP.file"

  debugLog "getFileListAtFtpSite() params : ${SFTP_OPTS} ${REMOTE_DIRECTORY} ${FILE_FILTER}"
  getFileListAtFtpSite "${SFTP_OPTS}" "${REMOTE_DIRECTORY}" "${FILE_FILTER}" &>> ${SFTP_FILE_LIST}
  status=$?
  
  if [ 0 -eq "$status" ]; then
    if [ "$DEBUG" = 1 ]; then
      echo "...contents of file generated by getFileListAtFtpSite" 
      cat ${SFTP_FILE_LIST}
      echo "..."
    fi

    # grep the local file that was generated to see if any filenames matching the FILE_FILTER was found
    regex=`echo "^${FILE_FILTER}" | sed -e 's/*/\.*/g'`
    
    # to get count of files ls found
    #   cat generated file SFTP_FILE_LIST
    #   grep -v '^sftp>'  : ignores any lines with the sftp> prompt
    #   grep -v '^Can.t ls' : ignores err returned from ls if no files are found (otherwise get a false positive)
    #   grep -c ${regex} : use grep to match for filenames
    debugLog "GET COUNT : cat "${SFTP_FILE_LIST}" | grep -v '^sftp.*' | grep -v '^Can.t ls' | grep -c ${regex}"
    numFilesToMove=`cat "${SFTP_FILE_LIST}" | grep -v '^sftp>.*' | grep -v '^Can.t ls' | grep -c ${regex}`
  fi

  debugLog "GET : numFilesOnSftpSite returned : $numFilesToMove"
 
  rm "${SFTP_FILE_LIST}"
  return "$numFilesToMove"
}

# ##############################################################################
#
#  Determines if there are files that are available for sftp to move
#
#    sets $filesToSftp to TRUE if files are found to sftp
#
function areThereFilesToSftp
{
  debugLog "areThereFilesToSftp() : BEGIN"
  if [ "GET" = "${GET_OR_PUT}" ]; then
       numFilesOnSftpSite
       numFiles=$?       

      debugLog "areThereFilesToSftp() : GET : num files found = $numFiles"

      if [ "$numFiles" -gt 0 ]; then
            filesToSftp="TRUE"
      fi
  else # PUT
      if [ -n "${LOCAL_DIRECTORY}" ]; then
         FILES=`ls ${LOCAL_DIRECTORY}/$FILE_FILTER`
      else
         FILES=`ls $FILE_FILTER`
      fi
      debugLog "PUT : files found = $FILES"

      if [ -n "$FILES" ]; then
          filesToSftp="TRUE"
      fi
  fi
  debugLog "areThereFilesToSftp() : END"
 }

# ##############################################################################
# Function : send
# Purpose  : 1.  Create of list of files to process.
#            2.  Build a SFTP Batch file containing the information
#                   to transfer the above files.
#                   (if doing a GET and REMOVE_FILE was specified, include a command to remove 
#                    files from the remote directory)
#            3.  Run SFTP and transfer the files.
#
function getOrPut
{
    # filename of sftp commands to execute
    export BATCH_FILENAME=/tmp/SFTP_FROM_BATCH.file

    # ######################################
    # Build a sftp batch script to use.
    #

    # Start fresh
    rm -f ${BATCH_FILENAME}

    #
    # If we have a local directory then sftp needs to
    #   change directories to that local directory.
    #
    if [ "" != "${LOCAL_DIRECTORY}" ]; then
       echo lcd ${LOCAL_DIRECTORY} >> ${BATCH_FILENAME}
    fi

    #
    # If we have a remote directory then sftp needs to
    #   change directories to that remote directory.
    #
    if [ "" != "${REMOTE_DIRECTORY}" ]; then
       echo cd ${REMOTE_DIRECTORY} >> ${BATCH_FILENAME}
    fi

    #
    # Make the sftp 'get' or 'put'
    #   Note: for GET operations, remove the files from the remote directory if specified
    #         for PUT operations, don't remove the files just yet (wait till after archive operation)
    #
    if [ "GET" = "${GET_OR_PUT}" ]; then
        echo get "${FILE_FILTER}" >> ${BATCH_FILENAME}
        if [ "true" = "${REMOVE_FILE}" ]; then
            echo rm "${FILE_FILTER}" >> ${BATCH_FILENAME}
        fi
    elif [ "PUT" = "${GET_OR_PUT}" ]; then
        echo put "${FILE_FILTER}" >> ${BATCH_FILENAME}
    fi

    #
    # Make sure we leave sftp
    #
    echo quit >> ${BATCH_FILENAME}

    if [ "$DEBUG" = 1 ]; then
        echo "..Generated SFTP commands : BEGIN..."
        cat ${BATCH_FILENAME}
        echo "..Generated SFTP commands : END....."
    fi

    # ######################################
    # Transfer the files
    #
#    source /root/.keychain/portaldb01.adchosted.com-sh

    debugLog "Sftp command : sftp -b ${BATCH_FILENAME} ${SFTP_OPTS}"
    sftp -b "${BATCH_FILENAME}" "${SFTP_OPTS}"  
    
    SFTP_EXIT_STATUS=$?
    debugLog "Sftp exit status: ${SFTP_EXIT_STATUS}"

    if [ 0 != ${SFTP_EXIT_STATUS} ]; then
        echo ".."
        echo ".. *** ERROR *** ${SFTP_EXIT_STATUS}"
        echo ".. Something went wrong with sftp."
        echo ".."
        return 1;
    else
        echo ".. Sftp operation SUCCEDED"
        return 0
    fi
}

# ##############################################################################
# Function : doArchive 
# Purpose  : If an ARCHIVE_DIRECTORY was specified:
#              1. zip sftp'd files into a ZIP file
#              2. move the ZIP file to the directory specified.
#             
function doArchive
{
    debugLog ""
    debugLog ".. doArchive()"
    #
    # If there is an Archive directory then
    #   Zip all files we put,
    #   delete the files after zipped (they are moved into the zip file).
    #
    if [ "" != "${LOCAL_DIRECTORY}" ]; then
        debugLog ".. cd ${LOCAL_DIRECTORY}"
        cd ${LOCAL_DIRECTORY}
    fi

    export FILES=`ls ${FILE_FILTER}`

    debugLog ".. FILES TO ARCHIVE :"
    debugLog "${FILES}"

    date_time=`date +%Y%m%d-%H%M%S`

    if [ "PUT" = "${GET_OR_PUT}" ]; then
        for FIL in ${FILES}; do
            export ZIP_FILENAME=${ARCHIVE_DIRECTORY}/${date_time}.${GET_OR_PUT}.${FIL}.zip
            debugLog ".. command ->  zip -m  ${ZIP_FILENAME}   ${FIL}"
            zip ${ZIP_FILENAME} ${FIL}
        done
    #
    # Zip all files we get.
    #
    elif [ "GET" = "${GET_OR_PUT}" ]; then
        for FIL in ${FILES}; do
            export ZIP_FILENAME=${ARCHIVE_DIRECTORY}/${date_time}.${GET_OR_PUT}.${FIL}.zip
            debugLog ".. command ->  zip ${ZIP_FILENAME}   ${FIL}"
            zip ${ZIP_FILENAME} ${FIL}
        done
    fi

    debugLog ".. end doArchive()"
    debugLog ""
}

# ##############################################################################
# Function : removePutFiles
# Purpose  : For PUT operations, removes files from the local directory that were processed. 
#            (For GET operations, the removal would have already occurred.)
#
function removePutFiles
{
    debugLog ""
    debugLog ".. removePutFiles() BEGIN.."
    
    localPath="${LOCAL_DIRECTORY}"
    if [ -z ${localPath} ]; then
       localPath="."
    fi
 
    if [ "PUT" = "${GET_OR_PUT}" ]; then
        debugLog "  rm -f ${localPath}/${FILE_FILTER}"
        rm -f ${localPath}/${FILE_FILTER}
    fi
   debugLog ".. end removePutFiles() END.."
   debugLog ""
}

# ##############################################################################
# Function : showHelp
# Purpose  : Display the valid way to call this Shell Script.
#
function showHelp
{
    echo "................................................................"
    echo ".. ${ERROR}"
    echo ".. sftpToFrom.sh  GET_OR_PUT  LOCAL_DIR  REMOTE_DIR  FILE_FILTER  SFTP_OPTS ARCHIVE_DIRECTORY  REMOVE_FILE"
    echo ".."
    echo "..  Required parameters :"
    echo ".."
    echo "..    1.  GET_OR_PUT        : A String usually in the format YYYYMMDD_HHMMSS for time stamping zip files."
    echo "..    2.  LOCAL_DIR         : The source directory from which to read files."
    echo "..    3.  REMOTE_DIR        : The destination directory from which to get/put files on remote  machine."
    echo "..    4.  FILE_FILTER       : A file wildcard filter for the files we are to process."
    echo "..    5.  SFTP_OPTS         : The host connection string and any port options for the sftp command line."
    echo "..    6.  ARCHIVE_DIRECTORY : The directory for the zip files ( all files are zipped )."
    echo "..    7.  REMOVE_FILE       : 'true' if to remove the file after GET or PUT."
    echo "..    8.  DESCRIPTION       : Description of the sftp process."
    echo ".."
    echo ".. ${ERROR}"
    echo ".."
    exit 1;
}

# ##############################################################################i
# Function: validateParams
# Purpose : retrieve passed parameters into variables and validate them
#
function validateParams
{
  # if REMOVE_FILE is not 'true', it should be 'false'
  if [ "true" !=  "${REMOVE_FILE}" ]; then
      REMOVE_FILE="false"
  fi
  
  #
  # Show input variable to aid with debugging.
  #
  debugLog ".."
  debugLog ".. GET_OR_PUT...............: ${GET_OR_PUT}"
  debugLog ".. LOCAL_DIRECTORY..........: ${LOCAL_DIRECTORY}"
  debugLog ".. REMOTE_DIRECTORY.........: ${REMOTE_DIRECTORY}"
  debugLog ".. FILE_FILTER..............: ${FILE_FILTER}"
  debugLog ".. SFTP_OPTS................: ${SFTP_OPTS}"
  debugLog ".. ARCHIVE_DIRECTORY........: ${ARCHIVE_DIRECTORY}"
  debugLog ".. REMOVE_FILE..............: ${REMOVE_FILE}"
  debugLog ".. DESCRIPTION..............: ${DESCRIPTION}"
  debugLog ".."

  #
  # Validate the incoming parameters.
  #
  if [ "" = "${FILE_FILTER}" ]; then
      showHelp;"${1}"
  fi

  case ${GET_OR_PUT} in
    GET) ;;
    PUT) ;;
    *)    export ERROR="GET_OR_PUT '${GET_OR_PUT}' not GET or PUT"
          showHelp;
  esac

  if [ "" = "${SFTP_OPTS}" ]; then
      export ERROR="SFTP_OPTS is missng."
      showHelp;
  fi

}


# ##############################################################################
#
# Run the main program.
#
echo "**************** BEGIN SFTP PROCESS ****************"
  # get/set variables
  export DEBUG=0  # puts out DEBUG level infomation
  export INFO=1   # puts out INFO level logging
  export GET_OR_PUT="${1}"
  export LOCAL_DIRECTORY="${2}"
  export REMOTE_DIRECTORY="${3}"
  export FILE_FILTER="${4}"
  export SFTP_OPTS="${5}"
  export ARCHIVE_DIRECTORY="${6}"
  export REMOVE_FILE="${7}"
  export DESCRIPTION="${8}"

  # begin script execution
  validateParams
  if [ -n "${DESCRIPTION}" ]; then
    infoLog "Sftp Desc ---> ${DESCRIPTION}"
    infoLog 
  fi
  
  export filesToSftp="FALSE"
  areThereFilesToSftp

  SFTP_STATUS=0  
  if [ "$filesToSftp" = "TRUE" ]; then
    debugLog "${numFiles} files found ... do sftp operation"

    getOrPut
    SFTP_STATUS=$?
    debugLog "exit status of sftp operation : ${SFTP_STATUS}"

    if [ "" != "${ARCHIVE_DIRECTORY}" ]; then
        doArchive
        SFTP_STATUS=$?
        debugLog "exit status of  archive operation : ${SFTP_STATUS}"
    fi
    
    if [ "true" = "${REMOVE_FILE}" ]; then
        removePutFiles
        SFTP_STATUS=$?
        debugLog "exit status of removePutFiles operation : ${SFTP_STATUS}"
    fi

  else
     echo "no files to sftp at this time"
  fi
  
  infoLog "sftpToFrom.sh exit status value $SFTP_STATUS"
echo "*************** END SFTP PROCESS FOR THIS SET OF CONFIG ****************"
echo
echo

exit "$SFTP_STATUS"





